R = 0.3; // 定义圆弧半径 R = 0.3
L = 1.0; // 定义矩形的边长 L = 1.0

// 定义模型中的关键点
Point(1) = {L, -L, 0};               // 矩形右下角点 (L, -L)
Point(2) = {L, L, 0};                // 矩形右上角点 (L, L)
Point(3) = {-L, L, 0};               // 矩形左上角点 (-L, L)
Point(4) = {-L, -L, 0};              // 矩形左下角点 (-L, -L)
Point(5) = {-L + R, -L, 0};          // 左下角靠近 (-L, -L) 的点，x 方向偏移 R
Point(6) = {-L, -L + R, 0};          // 左下角靠近 (-L, -L) 的点，y 方向偏移 R
Point(7) = {-L + Cos(Pi/4) * R, -L + Sin(Pi/4) * R, 0}; // 左下角圆弧上的中间点，45°方向偏移 R

// 定义圆弧和直线
Circle(1) = {5, 4, 7};              // 定义以点 4 为圆心，从点 5 到点 7 的圆弧
Circle(2) = {7, 4, 6};              // 定义以点 4 为圆心，从点 7 到点 6 的圆弧

Line(3) = {6, 3};                   // 从点 6 到点 3 的直线
Line(4) = {3, 2};                   // 从点 3 到点 2 的直线
Line(5) = {2, 1};                   // 从点 2 到点 1 的直线
Line(6) = {1, 5};                   // 从点 1 到点 5 的直线
Line(7) = {2, 7};                   // 从点 2 到点 7 的直线

// 定义曲线闭环和对应的平面区域
Curve Loop(1) = {4, 7, 2, 3};       // 定义闭合曲线环 1，由线 4、7、2、3 构成
Plane Surface(1) = {1};             // 定义由曲线环 1 围成的平面区域 1

Curve Loop(2) = {7, -1, -6, -5};    // 定义闭合曲线环 2，由线 7、反向圆弧 1、反向线 6、反向线 5 构成
Plane Surface(2) = {2};             // 定义由曲线环 2 围成的平面区域 2

// 定义网格划分规则
Transfinite Line{1, 2, 3, 4, 5, 6, 7} = 3; // 将所有直线和圆弧划分为 3 个网格段

Transfinite Surface{1};              // 为 Surface(1) 定义规则网格
Transfinite Surface{2};              // 为 Surface(2) 定义规则网格

Recombine Surface{1};                // 将 Surface(1) 的网格从三角形转换为四边形
Recombine Surface{2};                // 将 Surface(2) 的网格从三角形转换为四边形

// 设置网格生成属性
Mesh.ElementOrder = 1;               // 使用一阶单元（线性单元）
Mesh.Algorithm = 8;                  // 使用 Frontal-Delaunay 网格生成算法

// EOF
